#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Get project directory
PROJECT_DIR=$(git rev-parse --show-toplevel 2>/dev/null || (cd "$(dirname "$0")/../.." && pwd))
cd "$PROJECT_DIR" || exit 1

# Check for skip hooks flag
MSG=$(git log -1 --pretty=%B 2>/dev/null || true)
if echo "$MSG" | grep -qi "\[skip hooks\]"; then
  echo "ℹ️  Skipping hooks due to [skip hooks] flag"
  exit 0
fi

# Check gradle.properties for mod_version
if ! grep -q '^mod_version=' gradle.properties; then
  echo "WARN: gradle.properties does not contain 'mod_version'" >&2
fi

# Get staged files
staged_files=$(git diff --staged --name-only)

if [ -z "$staged_files" ]; then
  echo "ℹ️  No staged files found"
  exit 0
fi

echo "🧹 Checking code formatting for staged files..."

# Check if spotless would make changes (without applying them)
if ./gradlew spotlessCheck --quiet 2>/dev/null; then
  echo "✅ Code formatting is already correct"
else
  echo "❌ Code formatting issues found!"
  echo "   Running spotless to fix formatting..."
  ./gradlew spotlessApply --quiet

  # Check if any of the originally staged files were modified
  files_changed=false
  for file in $staged_files; do
    if test -f "$file" && ! git diff --staged --quiet "$file" 2>/dev/null; then
      # File exists but has unstaged changes after spotless
      git add "$file"
      files_changed=true
      echo "   ✓ Re-staged: $file"
    fi
  done

  if [ "$files_changed" = true ]; then
    echo "✅ Code has been formatted and re-staged"
    echo "   The commit will now proceed with properly formatted code"
  else
    echo "✅ Formatting completed, no additional staging needed"
  fi
fi

exit 0